[{"/home/sock/code/ethersproject/src/index.tsx":"1","/home/sock/code/ethersproject/src/reportWebVitals.ts":"2","/home/sock/code/ethersproject/src/App.tsx":"3","/home/sock/code/ethersproject/src/components/Dapp.tsx":"4","/home/sock/code/ethersproject/src/components/Navigation.tsx":"5","/home/sock/code/ethersproject/src/components/History.tsx":"6","/home/sock/code/ethersproject/src/assets/stuff.ts":"7","/home/sock/code/ethersproject/src/assets/web3.ts":"8","/home/sock/code/ethersproject/src/components/Chart.tsx":"9"},{"size":479,"mtime":1611279281630,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1610847952000,"results":"12","hashOfConfig":"11"},{"size":1213,"mtime":1611437091540,"results":"13","hashOfConfig":"11"},{"size":5745,"mtime":1611434542760,"results":"14","hashOfConfig":"11"},{"size":2234,"mtime":1611437227370,"results":"15","hashOfConfig":"11"},{"size":456,"mtime":1610860476260,"results":"16","hashOfConfig":"11"},{"size":436,"mtime":1611285868160,"results":"17","hashOfConfig":"11"},{"size":1319,"mtime":1611288384180,"results":"18","hashOfConfig":"11"},{"size":5296,"mtime":1611454851390,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"40csty",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/sock/code/ethersproject/src/index.tsx",[],["44","45"],"/home/sock/code/ethersproject/src/reportWebVitals.ts",[],"/home/sock/code/ethersproject/src/App.tsx",["46"],"import React, { useEffect, useState } from \"react\";\nimport { History } from \"./components/History\";\nimport { Dapp } from \"./components/Dapp\";\nimport { Navigation } from \"./components/Navigation\";\nimport { Chart } from \"./components/Chart\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.scss\";\n\nfunction App() {\n  const [user, setUser] = useState(\"\");\n  //opens intial wallet via metamasks injected eth window variable\n  const LoadDapp = async () => {\n    console.log(\"loading user account...\");\n    setUser(\n      (await (window as any).ethereum.request(\n        { method: \"eth_requestAccounts\" },\n      ))[0],\n    );\n    console.log(\"loading finished!\");\n  };\n  // start dapp via metamask wallet\n  useEffect(() => {\n    LoadDapp();\n  }, []);\n  return (\n    <Router>\n      <Navigation user={user} />\n\n      <Switch>\n        <Route path={[\"/dashboard\"]}>\n          <Dapp userAddress={user} />\n        </Route>\n        <Route\n          path=\"/chart\"\n        >\n          <Chart coin=\"bitcoin\" currency=\"usd\" days={14} />\n        </Route>\n      </Switch>\n\n      {/* <History user=\"0xa485b3e631c02834A73349CFA6c5543bB0796985\" /> */}\n    </Router>\n  );\n}\n\nexport default App;\n","/home/sock/code/ethersproject/src/components/Dapp.tsx",["47","48","49","50"],"import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { abi, provider } from \"../assets/stuff\";\nimport { Table } from \"antd\";\nimport {\n  getCurrentEthPrice,\n  getErc20Histroy,\n  getTokenPrice,\n} from \"../assets/web3\";\n\ninterface infoProp {\n  balance: string;\n  currentEthPrice: string;\n  erc20TokenHistory: any;\n  token: any;\n}\ninterface Props {\n  userAddress: string;\n}\nexport const Dapp: React.FC<Props> = ({\n  userAddress = \"\",\n  ...props\n}) => { //userAddress wallet id\n  const [info, setInfo] = useState<infoProp>();\n\n  //sets userAddress info (in own function to utilize async)\n  const getInfo = async () => {\n    let gasPrice = await provider.getGasPrice();\n    console.log(ethers.utils.formatEther(gasPrice));\n    //Get a list of \"ERC20 - Token Transfer Events\" by Address\n    let tokenHistroy = await getErc20Histroy(userAddress);\n    // create an unique address array from token transfer event history\n    let uniqueAddress = [];\n    const addrMap = new Map();\n    for (const item of tokenHistroy.result) {\n      if (!addrMap.has(item.contractAddress)) {\n        addrMap.set(item.contractAddress, true); // set any value to Map\n        uniqueAddress.push(item);\n      }\n    }\n    console.log(\n      `This address has interacted with ${uniqueAddress.length} different erc20 token contract address`,\n    );\n\n    let dog = uniqueAddress.map(async (items: any, i) => {\n      //contect to that tokens contract address, since these are erc20 tokens the follow a standard and have a method of balanceOf that accepcts an address\n      let contract = await new ethers.Contract(\n        items.contractAddress,\n        abi,\n        provider,\n      );\n      //   try {\n      //     console.log(await contract.getCurrentTokens());\n      //   } catch (e) {\n      //     console.log(\"does not exist\");\n      //   }\n      //format token balance from wei\n      let currentValue = await ethers.utils.formatEther(\n        await contract.balanceOf(userAddress),\n      );\n      let price = await getTokenPrice(items.contractAddress);\n      return {\n        token: items.tokenSymbol,\n        balance: currentValue,\n        price: price,\n        contract: items.contractAddress,\n      };\n    });\n\n    //update state info\n    setInfo({\n      currentEthPrice: await getCurrentEthPrice(),\n      //contverts wei to eth\n      balance: ethers.utils.formatEther(\n        await provider.getBalance(userAddress),\n      ),\n      //grabs all erc20 token transactions from address\n      erc20TokenHistory: tokenHistroy,\n      // returns promises after the settle (defined above)\n      token: (await Promise.allSettled(dog)).map((item: any) => item.value)\n        .filter((item: any) => {\n          console.log(item);\n          //this filter removes tokens the userAddress isnt using\n          //and also removes tokens that dont have a getBalance ABI contract method\n          if (item.balance === \"0.0\") return;\n          if (item.price === \"0.0\") {\n            console.log(item);\n            return;\n          }\n          return item;\n        }),\n    });\n  };\n\n  //if userAddress variable updates and is defined get info\n  useEffect(() => {\n    console.log(\"userAddress updated\");\n    userAddress != \"\" ? getInfo() : console.log(\"no userAddress to get yet\");\n  }, [userAddress]);\n\n  return (\n    <div className=\"dapp\">\n      {info?.balance\n        ? <Table\n          pagination={false}\n          title={(e) => {\n            console.log(e);\n            let totalTokenAssets = e.reduce(\n              (acc, token) => acc + (token.price * token.balance),\n              0,\n            ).toFixed(2);\n            console.log(totalTokenAssets);\n            return <h2>Wallet: ${totalTokenAssets}</h2>;\n          }}\n          dataSource={[\n            {\n              price: info.currentEthPrice,\n              balance: info.balance,\n              token: \"ETH\",\n            },\n            ...info.token,\n          ]}\n          columns={[\n            {\n              title: \"Token\",\n              dataIndex: \"token\",\n              key: \"token\",\n              render: (i, token) => {\n                if (token.contract === undefined) {\n                  token.contract = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n                }\n                return <span>\n                  <img\n                    alt={token.token}\n                    src={`https://github.com/trustwallet/assets/raw/master/blockchains/ethereum/assets/${\n                      ethers.utils.getAddress(token.contract)\n                    }/logo.png`}\n                  />\n                  {token.token}\n                </span>;\n              },\n            },\n            {\n              title: \"Balance\",\n              dataIndex: \"balance\",\n              key: \"balance\",\n              render: (balance) => ((balance * 1).toFixed(4)),\n              sorter: {\n                compare: (a, b) => a.balance - b.balance,\n              },\n            },\n            {\n              title: \"Price\",\n              dataIndex: \"price\",\n              key: \"price\",\n              responsive: [\"sm\"],\n              render: (price) => {\n                return `$${(price * 1).toFixed(2)}`;\n              },\n              sorter: {\n                compare: (a, b) => a.price - b.price,\n              },\n            },\n            {\n              title: \"Value\",\n              dataIndex: \"price\",\n              key: \"value\",\n              render: (balance, i) => {\n                return `$${(i.balance * i.price).toFixed(2)}`;\n              },\n              sorter: {\n                compare: (a, b) =>\n                  (a.balance * a.price) - (b.balance * b.price),\n              },\n            },\n          ]}\n        />\n        : \"No Avaliable balance\"}\n    </div>\n  );\n};\n","/home/sock/code/ethersproject/src/components/Navigation.tsx",["51","52"],"import React, { useState } from \"react\";\nimport { Menu, Modal } from \"antd\";\nimport {\n  DashboardOutlined,\n  GithubOutlined,\n  LineChartOutlined,\n} from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport { WalletOutlined } from \"@ant-design/icons\";\nimport EtherscanLogo from \"../assets/etherscan-logo-circle.svg\";\nimport { Link } from \"react-router-dom\";\nconst { SubMenu } = Menu;\n\ninterface Props {\n  user?: string;\n}\n\nexport const Navigation: React.FC<Props> = ({\n  user = \"\",\n  ...props\n}) => {\n  const [current, setCurrent] = useState(\"dashboard\");\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const handleClick = (e: any) => {\n    console.log(\"click \", e);\n    setCurrent(e.key);\n  };\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n  return (\n    <div className=\"navbar\">\n      <Menu onClick={handleClick} selectedKeys={[current]} mode=\"horizontal\">\n        <Menu.Item key=\"dashboard\" icon={<DashboardOutlined />}>\n          <Link to=\"/dashboard\">Dashboard</Link>\n        </Menu.Item>\n        <Menu.Item key=\"chart\" icon={<LineChartOutlined />}>\n          <Link to=\"/chart\">Chart</Link>\n        </Menu.Item>\n      </Menu>\n      <Button\n        onClick={showModal}\n        shape=\"round\"\n        type=\"primary\"\n        icon={<WalletOutlined />}\n      >\n        {user.substring(0, 4) + \"...\" +\n          user.substring(user.length - 3, user.length)}\n      </Button>\n      <Modal\n        title={\"Account: \" + user}\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <Button\n          //icon={>}\n          onClick={() => {\n            window.open(`https://etherscan.io/address/${user}`);\n          }}\n        >\n          <img src={EtherscanLogo} />\n          View On Etherscan\n        </Button>\n        <br />\n        <Button\n          onClick={() => {\n            window.open(\"https://github.com/About7Sharks/etherproject\");\n          }}\n        >\n          <GithubOutlined />\n          View On Github\n        </Button>\n        <br />\n\n        <p>More Coming Soon...</p>\n      </Modal>\n    </div>\n  );\n};\n","/home/sock/code/ethersproject/src/components/History.tsx",["53"],"import React, { useEffect } from \"react\";\nimport { ethers } from \"ethers\";\ninterface Props {\n  user: string;\n}\n\nexport const History: React.FC<Props> = ({ user }) => {\n  useEffect(() => {\n    let etherscanProvider = new ethers.providers.EtherscanProvider();\n    etherscanProvider.getHistory(user).then((history) => {\n      history.forEach((tx) => {\n        console.log(tx);\n      });\n    });\n  }, []);\n  return (\n    <div>\n      History\n    </div>\n  );\n};\n",["54","55"],"/home/sock/code/ethersproject/src/assets/stuff.ts",[],"/home/sock/code/ethersproject/src/assets/web3.ts",[],"/home/sock/code/ethersproject/src/components/Chart.tsx",["56","57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":17},{"ruleId":"66","severity":1,"message":"67","line":85,"column":39,"nodeType":"68","messageId":"69","endLine":85,"endColumn":46},{"ruleId":"66","severity":1,"message":"67","line":88,"column":13,"nodeType":"68","messageId":"69","endLine":88,"endColumn":20},{"ruleId":"70","severity":1,"message":"71","line":98,"column":17,"nodeType":"72","messageId":"73","endLine":98,"endColumn":19},{"ruleId":"74","severity":1,"message":"75","line":99,"column":6,"nodeType":"76","endLine":99,"endColumn":19,"suggestions":"77"},{"ruleId":"62","severity":1,"message":"78","line":12,"column":9,"nodeType":"64","messageId":"65","endLine":12,"endColumn":16},{"ruleId":"79","severity":1,"message":"80","line":71,"column":11,"nodeType":"81","endLine":71,"endColumn":38},{"ruleId":"74","severity":1,"message":"82","line":15,"column":6,"nodeType":"76","endLine":15,"endColumn":8,"suggestions":"83"},{"ruleId":"58","replacedBy":"84"},{"ruleId":"60","replacedBy":"85"},{"ruleId":"74","severity":1,"message":"86","line":103,"column":6,"nodeType":"76","endLine":103,"endColumn":13,"suggestions":"87"},{"ruleId":"74","severity":1,"message":"88","line":109,"column":6,"nodeType":"76","endLine":109,"endColumn":12,"suggestions":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"@typescript-eslint/no-unused-vars","'History' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getInfo'. Either include it or remove the dependency array.","ArrayExpression",["92"],"'SubMenu' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["93"],["90"],["91"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["94"],"React Hook useEffect has a missing dependency: 'createAnnotations'. Either include it or remove the dependency array.",["95"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [getInfo, userAddress]",{"range":"104","text":"105"},"Update the dependencies array to be: [user]",{"range":"106","text":"107"},"Update the dependencies array to be: [fetchData, query]",{"range":"108","text":"109"},"Update the dependencies array to be: [createAnnotations, data]",{"range":"110","text":"111"},[3279,3292],"[getInfo, userAddress]",[397,399],"[user]",[2984,2991],"[fetchData, query]",[3132,3138],"[createAnnotations, data]"]